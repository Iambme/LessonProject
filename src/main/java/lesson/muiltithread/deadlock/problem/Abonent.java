package lesson.muiltithread.deadlock.problem;

public class Abonent {
    String name;

    public Abonent(String name) {
        this.name = name;
    }

    /**
     * Метод, запускающий мелодию звонка на телефоне собеседника
     * Так как данный метод тоже синхронизирован, то его не удастся вызвать до тех пор, пока
     * объект, у которого он вызывается, не осбодится из синхронизации
     */
    public synchronized void ringPhone(){
        System.out.println("Включаем мелодию звонка у собеседника");
    }

    /**
     * Метод набора номера на телефоне.
     * Данный метод синхронизирован, поэтому когда оба абонента одновременно начинают набирать друг друга
     * их объекты становятся заблокированными (не доступными для других потоков)
     * Блокировка(DeadLock) происходит, когда в заблокированном состоянии каждый объект пытается получить доступ
     * к методу другого объекта (в данном случае ringPhone)
     * @param abonent
     */
    public synchronized void dialUp(Abonent abonent){
        //синхронизирует текущий объект this
        System.out.println("Набираем "+abonent.name);
        //пытается вызвать метод заблокированного объекта в другом потоке abonent
        abonent.ringPhone();
    }
}
